package com.qicode.kakaxicm.kchat.db.dbmodel;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_GREEN_DB_OBJECT".
*/
public class MessageGreenDbObjectDao extends AbstractDao<MessageGreenDbObject, Long> {

    public static final String TABLENAME = "MESSAGE_GREEN_DB_OBJECT";

    /**
     * Properties of entity MessageGreenDbObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Pid = new Property(0, Long.class, "pid", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Localtime = new Property(2, long.class, "localtime", false, "LOCALTIME");
        public final static Property Timestamp = new Property(3, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Conversation = new Property(4, String.class, "conversation", false, "CONVERSATION");
        public final static Property Receiver = new Property(5, boolean.class, "receiver", false, "RECEIVER");
        public final static Property ChatType = new Property(6, String.class, "chatType", false, "CHAT_TYPE");
        public final static Property Bodies = new Property(7, String.class, "bodies", false, "BODIES");
        public final static Property SendStatus = new Property(8, int.class, "sendStatus", false, "SEND_STATUS");
    }


    public MessageGreenDbObjectDao(DaoConfig config) {
        super(config);
    }
    
    public MessageGreenDbObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_GREEN_DB_OBJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: pid
                "\"ID\" TEXT," + // 1: id
                "\"LOCALTIME\" INTEGER NOT NULL ," + // 2: localtime
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 3: timestamp
                "\"CONVERSATION\" TEXT," + // 4: conversation
                "\"RECEIVER\" INTEGER NOT NULL ," + // 5: receiver
                "\"CHAT_TYPE\" TEXT," + // 6: chatType
                "\"BODIES\" TEXT," + // 7: bodies
                "\"SEND_STATUS\" INTEGER NOT NULL );"); // 8: sendStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_GREEN_DB_OBJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageGreenDbObject entity) {
        stmt.clearBindings();
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(1, pid);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
        stmt.bindLong(3, entity.getLocaltime());
        stmt.bindLong(4, entity.getTimestamp());
 
        String conversation = entity.getConversation();
        if (conversation != null) {
            stmt.bindString(5, conversation);
        }
        stmt.bindLong(6, entity.getReceiver() ? 1L: 0L);
 
        String chatType = entity.getChatType();
        if (chatType != null) {
            stmt.bindString(7, chatType);
        }
 
        String bodies = entity.getBodies();
        if (bodies != null) {
            stmt.bindString(8, bodies);
        }
        stmt.bindLong(9, entity.getSendStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageGreenDbObject entity) {
        stmt.clearBindings();
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(1, pid);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
        stmt.bindLong(3, entity.getLocaltime());
        stmt.bindLong(4, entity.getTimestamp());
 
        String conversation = entity.getConversation();
        if (conversation != null) {
            stmt.bindString(5, conversation);
        }
        stmt.bindLong(6, entity.getReceiver() ? 1L: 0L);
 
        String chatType = entity.getChatType();
        if (chatType != null) {
            stmt.bindString(7, chatType);
        }
 
        String bodies = entity.getBodies();
        if (bodies != null) {
            stmt.bindString(8, bodies);
        }
        stmt.bindLong(9, entity.getSendStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageGreenDbObject readEntity(Cursor cursor, int offset) {
        MessageGreenDbObject entity = new MessageGreenDbObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.getLong(offset + 2), // localtime
            cursor.getLong(offset + 3), // timestamp
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // conversation
            cursor.getShort(offset + 5) != 0, // receiver
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // chatType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bodies
            cursor.getInt(offset + 8) // sendStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageGreenDbObject entity, int offset) {
        entity.setPid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocaltime(cursor.getLong(offset + 2));
        entity.setTimestamp(cursor.getLong(offset + 3));
        entity.setConversation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReceiver(cursor.getShort(offset + 5) != 0);
        entity.setChatType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBodies(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSendStatus(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageGreenDbObject entity, long rowId) {
        entity.setPid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageGreenDbObject entity) {
        if(entity != null) {
            return entity.getPid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageGreenDbObject entity) {
        return entity.getPid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
