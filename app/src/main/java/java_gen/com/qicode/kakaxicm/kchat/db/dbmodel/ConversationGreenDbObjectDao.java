package com.qicode.kakaxicm.kchat.db.dbmodel;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONVERSATION_GREEN_DB_OBJECT".
*/
public class ConversationGreenDbObjectDao extends AbstractDao<ConversationGreenDbObject, Long> {

    public static final String TABLENAME = "CONVERSATION_GREEN_DB_OBJECT";

    /**
     * Properties of entity ConversationGreenDbObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Pid = new Property(0, Long.class, "pid", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Ext = new Property(2, String.class, "ext", false, "EXT");
        public final static Property Unreadcount = new Property(3, int.class, "unreadcount", false, "UNREADCOUNT");
        public final static Property Latestmsgtext = new Property(4, String.class, "latestmsgtext", false, "LATESTMSGTEXT");
        public final static Property Latestmsgtimestamp = new Property(5, long.class, "latestmsgtimestamp", false, "LATESTMSGTIMESTAMP");
    }


    public ConversationGreenDbObjectDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationGreenDbObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONVERSATION_GREEN_DB_OBJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: pid
                "\"ID\" TEXT NOT NULL ," + // 1: id
                "\"EXT\" TEXT," + // 2: ext
                "\"UNREADCOUNT\" INTEGER NOT NULL ," + // 3: unreadcount
                "\"LATESTMSGTEXT\" TEXT," + // 4: latestmsgtext
                "\"LATESTMSGTIMESTAMP\" INTEGER NOT NULL );"); // 5: latestmsgtimestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONVERSATION_GREEN_DB_OBJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ConversationGreenDbObject entity) {
        stmt.clearBindings();
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(1, pid);
        }
        stmt.bindString(2, entity.getId());
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(3, ext);
        }
        stmt.bindLong(4, entity.getUnreadcount());
 
        String latestmsgtext = entity.getLatestmsgtext();
        if (latestmsgtext != null) {
            stmt.bindString(5, latestmsgtext);
        }
        stmt.bindLong(6, entity.getLatestmsgtimestamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ConversationGreenDbObject entity) {
        stmt.clearBindings();
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(1, pid);
        }
        stmt.bindString(2, entity.getId());
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(3, ext);
        }
        stmt.bindLong(4, entity.getUnreadcount());
 
        String latestmsgtext = entity.getLatestmsgtext();
        if (latestmsgtext != null) {
            stmt.bindString(5, latestmsgtext);
        }
        stmt.bindLong(6, entity.getLatestmsgtimestamp());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ConversationGreenDbObject readEntity(Cursor cursor, int offset) {
        ConversationGreenDbObject entity = new ConversationGreenDbObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pid
            cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ext
            cursor.getInt(offset + 3), // unreadcount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // latestmsgtext
            cursor.getLong(offset + 5) // latestmsgtimestamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ConversationGreenDbObject entity, int offset) {
        entity.setPid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getString(offset + 1));
        entity.setExt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUnreadcount(cursor.getInt(offset + 3));
        entity.setLatestmsgtext(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLatestmsgtimestamp(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ConversationGreenDbObject entity, long rowId) {
        entity.setPid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ConversationGreenDbObject entity) {
        if(entity != null) {
            return entity.getPid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ConversationGreenDbObject entity) {
        return entity.getPid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
